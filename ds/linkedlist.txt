
//############################### End of Utisl #########################################
// The idea is simple iterative over two list by two pointer and compare it and append to the result.
// At begining, We have creted a dummy node as result and an extra pointer as a tail. While compairing
// we keep pushing the less value node into tail in result list.
// (1) What happens if two list have different length ?
// (2) Note that we need to return head->next as head is a dummy node, Also take care if freeing this node before returing.
ListNode * mergeTwoLists(ListNode * l1,  ListNode * l2) {
    //let's have a dummy node
    ListNode * head = new ListNode(0);
    ListNode * tail = head;
    while(l1 != NULL && l2 != NULL) {
        if(l1->val < l2->val) {
            tail->next = l1;
            tail = l1;
            l1 = l1->next;
        } else {
            tail->next = l2;
            tail = l2;
            l2 = l2->next;
        }
    }
    //At this point eith l1 or l2 reach at end.
    if(l1 != NULL) {
        tail->next = l1;
    } else {
        tail->next = l2;
    }
    //at end return the head ,
    return head->next;
}

// Merge K list is something that requrire a DS to findout all the head of LL, which can be done by Pririty Queue.
// So we caeate a PQ and push all the front. We keep poping out the front of PQ and append to the result, if X is
// getting poped out, we need to push next of x, as it become the next comperin candidate.
// (1) Never push a null node in PQ,
// (2) result list is define as Dummy node and take a tail pointer to append. We sould not change the head as we need to return this.
struct LessThan {
    bool operator()(const ListNode * lhs,  const ListNode * rhs) const {
        return lhs->val > rhs->val;
    }
};

ListNode * mergeKLists(vector < ListNode *> & lists) {
    std::priority_queue < ListNode * ,  vector < ListNode * > ,  LessThan > pq;
    //Let;'s create a dummany node for head.
    ListNode * head = new ListNode(0);
    ListNode * tail = head;
    //Initilize the pq.
    for( ListNode * firstnode : lists ) {
        if(firstnode != NULL)
        pq.push(firstnode);
    }
    while( ! pq.empty()) {
        ListNode * temp = pq.top();
        tail->next = temp;
        tail = temp;
        if(temp->next != NULL)
        pq.push(temp->next);
        pq.pop();
    }
    return head->next;
}
// The idea is to first duplicate the node as next , this 1->2->3 become 1->1->2->2->3->3.
// Next, You just copy equivalnt random pointer and lastly spilt the list and return new list.
// (1) What if the list is empty ?
// (2) while copying the random pointer, what if random pointer is null ?
// (3) Is your split gurentees of restoring original list ? hist: try to move pointer in once.
RandomListNode * copyRandomList(RandomListNode * head) {
    //Single Node - Do nothing
    if(head == NULL ) return NULL;
    //1. Duplicate the next node
    RandomListNode * temp = head;
    while(temp != NULL) {
        RandomListNode * node = new RandomListNode(temp->label);
        node->next = temp->next;
        temp->next = node;
        temp = temp->next->next;
    }
    //2. Copy the random pointers
    temp = head;
    while(temp != NULL) {
        if(temp->random != NULL){
            temp->next->random = temp->random->next;
        }
        temp = temp->next->next;
    }
    //printRandomList(head);
    //3. Split the nodes.
 	// break list to two
	temp = head;
	RandomListNode *newHead = head->next;
	while (temp != NULL) {
		RandomListNode *temp1 = temp->next;
		temp->next = temp1->next;
		if (temp1->next != NULL)
			temp1->next = temp1->next->next;
		temp = temp->next;
	}
    //4. return new Node
    return newHead;
}

//################ Recursion ################
// This problem can be solved by revering the list and traversing from left to right and keep tracking the max elment
// Once all random pointer got assign , reverse the list again and return. This problem can be solved by recursive stack.
// We use a static memebr to keep track the max value while popping back from recursion stack.
// (1) Static member intilized only once and having one copy acrosss recustion.
// (2) After commong back from recustion call, it should conatins the max elment from right side.
// (3) After this we must update this static pointer with including the current data.
void populateGreaterPointer(RandomListNode * head) {
    //Let's have a stack memeber for reater node;
    static RandomListNode * max = NULL;
    if(head == NULL) return; //No node
    if(head->next == NULL) {
        // One node.
        max = head;
        return;
    }
    //Apply the recursion, it will eventualy updates the static pointer.
    populateGreaterPointer(head->next);
    //At this point the max pointer points to greatest value in right,
    // We should assign random pinter if it is also greater than the current node.
    if(max->val > head->val)
    head->random = max;
    //update max pointer
    if(head->val > max->val) {
        max = head;
    }
}

// This is a tricky recursive process. We Got a linkeldist, if it has zero or one node, just return
// Logically devide list into two part - first and rest. Do the recursive call on rest - after this call rest would be revided,
// At this activation, rest is the adess of next node of first as the adress of a node is not getting cahnged. so first->next == rest and
// first ->next->next = first is rever the link. we set first->next to NULL to cur the loop.
// You can also note that we pass the head_ref as head can be modified while reversal.
void RecursiveReverse( ListNode ** head_ref) {
    // base case no node or one node.
    if( * head_ref == NULL || ( * head_ref)->next == NULL) {
        return;
    }
    //what is fast and rest ?
    ListNode * first = * head_ref;
    ListNode * rest = first->next;
    // call the recursion on rest
    RecursiveReverse( & rest);
    //at this we can assume that rest of linkedlist got reversed. but still first points to the rest node address, assigning rest pointer
    // to first and cut the link to remove cycle.
    first->next->next = first;
    first->next = NULL;
    //Update the head pointer - this is little trckey - draw the diagram to understand how
    // headpointer getting copied. alternatively you can keep hearing the head
     * head_ref = rest;
}

//This is the most common recursive way to do repetaive linkedlist operation. As we need to mereg alternatuivly , let's merge the first two head
// and left the rest of both list for recurson to take care the rest of merging and atlast return the head to the caller. This result will be appened
// to the mergeed list in called and then return the total list in caller.
// This is common way to solve number of problem like Merge two list, add numbers in the list, compare two list, pairwise swap of list etc.
// (1) Note that recustion returns a head node to calller which is appened in the list in caller side.
ListNode * alternativeMerge( ListNode * a,  ListNode * b) {
    if (a == NULL) return b;
    if( b == NULL) return a;
    ListNode * res = alternativeMerge(a->next,  b->next);
    a->next = b;
    b->next = res;
    return a;
}

// This another example when we can do it by recursion. we call the recurion function for rest of list exceptt current to add one and get the carray
// then it do the operation on current elment and return the new carry.
// As we are adding one, head might need to be modifed, hence we are passing head as double pointer. 
// if the AddOneUtils retuens one , we need to create a new node and reset the head references
int AddOneUtils(ListNode * cur) {
    if(cur->next == NULL) {
        //last node
        int val = cur->val + 1;
        cur->val = val %10;
        return val / 10;
    } else {
        int carry = AddOneUtils(cur->next);
        int val = cur->val + carry;
        cur->val = val %10;
        return val / 10;
    }
}

void AddOne(ListNode ** head_ref) {
    int carry = AddOneUtils( * head_ref);
    //as carry is one we must
    if(carry == 1) {
        ListNode * node = new ListNode(1);
        node->next = * head_ref;
         * head_ref = node;
    }
}
