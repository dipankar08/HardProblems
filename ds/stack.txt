#########################################
Problem on stack
#########################################

IceBreakers
--------------------------
1) Simplify unix path.

Problems on parenthesis
------------------------
1) Detect Duplicate parenthesis 
2) Redundant Braces
3) maximum depth of nested parenthesis in a string

Stack Mathamatics
-----------------------
1) Evaluate Expression
2) Rain Water Trapped

Custom Implementation
----------------------
1) Stack in an Array 
1A) Two Stack in an array
1B) stack in an array
2) Implement a stack using single queue
2A) Implement a stack using Two queue
3) Reverse an stack inplace
4) sort a stack

Custom Operation
-----------------------
2) Design a stack that supports getMin() in O(1) time 
2) Design a stack that supports getMin() in O(1) time and O(1) extra space
3 ) Get Middle in O(1)


Hard Problems
-----------------
1) Nearest Smaller Element [Done]
3) Largest Rectangle in Histogram[DONE]
4) Merge Overlapping Intervals
5) The Stock Span Problem/Next greater elements [DONE]



codes
-------------------------------------------------------
// This is very simple example of stack. Just scan though left to right and keep the token string. When you got a /,
// you might do push, pop or do nothing. At end pop all the elment from Stack and keep prepending to get the result. 
// Some tricky test is what if (a) the string donet end with / (b) what if your stack and donet contains any thing ex:/.././
//(c) what if  you have something like /..////../ ?
string simplifyPath(string str) {
    //adding / at the end
    str = str + "/";
    stack < string > s;
    string name;
    for(int i = 1; i < str.size(); i++) {
        if(str[i] == '/') {
            if(name.size() == 0) continue;
            if(name == "..") {
                if( ! s.empty()) s.pop();
            } else if(name == "."){
                //do nothing
                } else {
                s.push(name);
            }
            name.clear();
        } else {
            name.push_back(str[i]);
        }
    }
    string res;
    while( ! s.empty()) {
        res.insert(0,  "/" + s.top());//prepend
        s.pop();
    }
    if(res.size() == 0) res.append("/");
    return res;
}


// The idea is to keep track all the minimum candicate for perticular elemnet while scanning from left to right.
// We remove all elemment which is higher than the elmemt under process and print the answer and then push that
// element into the stack as a potential candidate as min for next elment. Here stack allow us to store all potential minimum 
// in order.
vector < int > prevSmaller(vector < int > & nums) {
    stack < int > s;
    vector < int > res;
    //base case:
    if(nums.size() == 0) return res;
    // The output of first elment is always -1
    res.push_back( - 1);
    s.push(nums[0]);
    for(int i = 1; i < nums.size(); i++) {
        //find the corerct minimum from the candidate in the stack
        while( ! s.empty() && s.top() >= nums[i]) {
            s.pop();
        }
        // at this point either stack tp conatins min or empty.
        if(s.empty()) {
            res.push_back(-1);
        } else {
            res.push_back(s.top());
        }
        //Push this elment as minimum candidate for next elemnet
        s.push(nums[i]);
    }
    return res;
}

// The problem is simlar as other one, we scan the array from right to left
// and keep track the potential max candidate for that perticular elemnet.
vector < int > nextGreater(vector < int > & nums) {
    stack < int > s;
    vector < int > res;
    //base case:
    if(nums.size() == 0) return res;
    // The output of first elment is always -1
    res.push_back( - 1);
    s.push(nums[nums.size()-1]);
    
    for(int i = nums.size()-2; i >=0 ; i--) {
        //find the corerct max from the candidate in the stack
        while( ! s.empty() && s.top() <= nums[i]) {
            s.pop();
        }
        // at this point either stack tp conatins max or empty.
        if(s.empty()) {
            res.push_back(-1);
        } else {
            res.push_back(s.top());
        }
        //Push this elment as max candidate for next elemnet ( in right to left fasihm)
        s.push(nums[i]);
    }
    //Now Reverse this output 
    reverse(res.begin(), res.end());
    return res;
}

//The idea is to scan the array from left and having a stack to keeptrack all the incrementing height.
// if cur elment is higher than stack top , just push it, if it is less, pop elemnet one by one and 
// calculate height of each segment. It's easy to calculate . Try to do it in white board for incrementaing heights.
int largestRectangleArea(vector<int> &nums) {
    stack<int> s;
    int max_so_far = 0;
    int i ;
    while(i<nums.size()){
        //Is the height of this bar is higher than previous on stack
        if(s.empty() || nums[i] >= nums[s.top()] ){
            s.push(i++);
            continue;
        }
        //Here the current bar height is -ve, so we can't go farther and we need to pop.
        while(!s.empty() &&  nums[s.top()] > nums[i]){
            //See what is the result for this?
            int height = nums[s.top()];
            s.pop();
            int width = s.empty() ? i : (i - s.top())  -1;
            max_so_far = max(max_so_far, height*width );
        }
        //push this just like starting..
        s.push(i++);
    }
    // at this point the stack contins only incremetal heights.
    // do the same operation by looking backword and calculating the ans.
    while(!s.empty()){
            int height = nums[s.top()];
            s.pop();
            int width = s.empty()? i: i - s.top()  -1;
            max_so_far = max(max_so_far, height*width );
    }
    return max_so_far;
}

// This is simple recursion function. Only trick is that you can only inject ) iff we already injected more ( .
// This will ensure that it will keepalance. You can also notices how we are collecting the result passing out
// as "pass by refernce"
void generateParenthesisUtils(string cur,  int start,  int end,  int n,  vector < string > & out) {
    // base case.
    if(start == n && end == n) {
        out.push_back(cur);
        return;
    }
    //If we can add more first breaksts
    if(start < n) {
        generateParenthesisUtils(cur + "(",  start + 1,  end,  n,  out);
    }
    //can i add more brackets.
    if(start > end) {
        generateParenthesisUtils(cur + ")",  start,  end + 1,  n,  out);
    }
}

vector < string > generateParenthesis(int n) {
    vector < string > res;
    generateParenthesisUtils("",  0,  0,  n,  res);
    return res;
}

// The idea is not to use stack as we only having same brackets. Thus keep tracking only open and close coutnt
// would be suffiecnet. Make sure:
// (1) at point close_count always less than open count e.g ")("
// (2) At last we must same number open and close brackets
bool isValid_I(string s) {
    int open_count = 0 ,  close_count = 0;
    for(char c : s) {
        if(c == '(') {
            open_count++;
        }
        if( c == ')') {
            close_count ++;
            if(close_count > open_count) {
                return 0;
            }
        }
    }
    return open_count == close_count ;
}

//The idea is use to stack. When we get a open brackets and push it and when we get a close backets, pop the top of the stack and match.
// (1) return zero if they doent match
// (2) At last of stack should be empty
// (3) At any point if we get an close braclet and stcak is empty that means Not sufficent open brackets so return false.
#include<stack>
bool isValid_II(string s) {
    stack < char > st;
    for( char c : s) {
        if(c == '(' || c == '[' || c == '{') {
            st.push(c);
        } else {
            // It should not be that means we have more end bracklets first
            if(st.empty()) {
                return 0;
            }
            char top = st.top();
            st.pop();
            if( (top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']') ){
                //Ok..
                } else {
                return 0;
            }
        }
    }
    return st.empty();
}

// here we have a WRONG solution using scanning. It doent solve the problem. failed for "()(()" as it keep an entry in stack.
int longestValidParentheses_WRONG(string s) {
    int max_length = 0,  cur_length = 0,  open_bal_count = 0;
    for( char c : s) {
        if(c == '(') {
            open_bal_count ++;
        } else {
            open_bal_count --;
            if(open_bal_count < 0) {
                // non valid.
                max_length = max(max_length,  cur_length );
                cur_length = 0;
            } else {
                // valid
                cur_length = cur_length + 2;
            }
        }
    }
    //at end see what is the cur_length . e.g. "()()("
    max_length = max(max_length,  cur_length );
    return max_length;
}

// The idea to use stack as need to keep index of elment. The problem is when a full match occure, stack become emetry how to keep track
// blace till now. Need to push SOME DUMMRY Node.
// (1) Fully balace string . Nothing in left in stack this case length would be i+1
// (2) More first bracket: Will be taken care as we update the length on each )
// (3) More ) , will break in middle : () () ) () => This case, we need to add a terminator when we process third )
int longestValidParentheses(string s) {
    stack < pair < int,  int >> st;
    int result = 0;
    for(int i = 0; i < s.size(); i++) {
        char c = s[i];
        if(c == '(') {
            st.push(make_pair(i,  0));// ZERo means actual index..
            } else {
            if(st.empty() || st.top().second == 1) {
                st.push(make_pair(i,  1)); // We need to PUSH a dummay node Indiactes as a terminator.
                } else {
                st.pop();
                int currentLen = 0;
                if(st.empty()) {
                    // Means all matchs done.. cool so length is i+1 as zero based index/
                    currentLen = i + 1;
                } else {
                    currentLen = i - st.top().first; // current - terminator index.
                    }
                result = max(result,  currentLen);
            }
        }
    }
    return result;
}
// This can be easily done using stack, here when we get '), we keep poppoing ultil we found ') and see
// in this time if we get any Operator. If no that means it's a ddupliacte parenthesis.
int CountReduntBraces(string s) {
    stack < char > st;
    int r_count = 0;
    for( char c : s) {
        if(c == ')') {
            int is_exp = false;
            while(st.top() != '(') {
                if(st.top() == '+' || st.top() == '/' || st.top() == '*' || st.top() == '-' ) {is_exp = true;}
                st.pop();
            }
            st.pop();
            if(is_exp == false) {
                r_count ++;
            }
        } else {
            if(c == '+' || c == '/' || c == '*' || c == '-'  || c == '(')
                st.push(c);
        }
    }
    return r_count;
}

