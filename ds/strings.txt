######################################################################################
 Please list your problem Here 
######################################################################################

Window Scan technique
----------------------
1. find minmum window to cover all strings.




String Encode Decode problems
-----------------------------
1. Encode strings like wwwwaaadexxxxxx => w4a3d1e1x6
2. Decode strings like w4a3d1e1x6 => wwwwaaadexxxxxx





















//The idea is to have a frequnecy map for string t and scan string s from lefte to right
// we have two pointer left and right, we are moving right unless all char of t geot covered.
//then we move left to srink the windows by skipping all useless and extra char required to cover t
string findMinWindowsCoversAllElement(string s,  string t){
    char toBeFound[256] = {0};
    char hasFound[256] = {0};
    for( int i = 0; i < t.size(); i++) {
        toBeFound[t[i]]++;
    }
    int hasFoundCount = 0;
    int left = 0,  right = 0,  min_length_so_far = INT_MAX;
    string result="";
    
    while(right < s.size()){
        //expand right unless we found all the element
        for(;hasFoundCount < t.size() && right < s.size();right++ ){
            if(toBeFound[s[right]] > 0){ //usefull.
                if( hasFound[s[right]] < toBeFound[s[right]]) hasFoundCount++;
                hasFound[s[right]] ++;
            }
        }
        // At this point, we found all elemnet so try to sync.
        if(hasFoundCount == t.size()){ 
            while(left < right){
                if(toBeFound[s[left]] == 0 ){ // useless symbol.
                    left++;
                    continue;
                }
                if(hasFound[s[left]] > toBeFound[s[left]]){ // extra char
                    left++;
                    continue;
                }
                if(hasFound[s[left]] == toBeFound[s[left]]){ // we found a mast have char so we cant srink more
                    //update output
                    if( right - left < min_length_so_far ){
                        min_length_so_far = right - left;
                        result = s.substr(left,min_length_so_far); 
                    }
                    
                    //Now proceed more
                    hasFound[s[left]]--;
                    hasFoundCount --;
                    left++;
                    break;
                }
            }
        }
        
    }
    return result;
}


void reverse(char * a,  int l,  int r) {
    while(l < r) {
        char t = a[l];
        a[l] = a[r];
        a[r] = t;
        l++;
        r--;
    }
}

//Exampel 1: wwwwaaadexxxxxx => w4a3d1e1x6
char * encodestring( char * a) {
    int in_idx = 0;
    int out_idx = 0;
    //scan from left to right
    char cur = a[in_idx++];
    int count = 1;
    while( a[in_idx] != '\0') {
        if(cur == a[in_idx]) {
            count++;
            in_idx++;
        } else {
            a[out_idx++] = cur;
            int start = out_idx;
            while(count > 0) {
                a[out_idx++] = count%10 + '0';
                count = count / 10;
            }
            reverse(a,  start,  out_idx - 1);
            cur = a[in_idx];
            count = 1;
            in_idx++;
        }
    }
    //We might have somthing left
    a[out_idx++] = cur;
    int start = out_idx;
    while(count > 0) {
        a[out_idx++] = count%10 + '0';
        count = count / 10;
    }
    reverse(a,  start,  out_idx - 1);
    a[out_idx++] = '\0';
    return a;
}

//Exampel 2: wwwwaaadexxxxxx <= w4a3d1e1x6
char * decode(char * a) {
    //find out the length
    int len = 0;
    int cur_lenth = 0;
    for(int i = 0; i < strlen(a); i++) {
        if(a[i] >= '0' && a[i] <= '9') {
            cur_lenth = cur_lenth * 10 + a[i] - '0';
        } else {
            len = len + cur_lenth;
            cur_lenth = 0;
        }
    }
    //just need to do it at the end
    len = len + cur_lenth;
    //cout << len;
    char * dest = new char[len + 1];
    //iterate over again..
    cur_lenth = 0;
    char cur_char = a[0];
    int j = 0;
    for(int i = 0; i < strlen(a); i++) {
        if(a[i] >= '0' && a[i] <= '9') {
            cur_lenth = cur_lenth * 10 + a[i] - '0';
        } else {
            while(cur_lenth > 0){
                dest[j++] = cur_char;
                cur_lenth--;
            }
            cur_lenth = 0;
            cur_char = a[i];
        }
    }
    while(cur_lenth > 0){
        dest[j++] = cur_char;
        cur_lenth--;
    }
    dest[j] ='\0';
    return dest;
}



// The idea is to doing it by recursion. The base case when we need one segmnet i.e. k =1, elase just acuurering the sum upto < 255 and 
// do the recursion for remaining charecter.
// It can eb also noted that there are two main constrains (1) res < 255 (2) we Can't have leading zeros. 10.01.10.11 is invalid.
vector < string > FindAllUtils(string s,  int k) {
    vector < string > out;
    //base case when we are having one string.
    if( k == 1) {
        if(s.empty()) return out;
        int res = 0;
        for(int i = 0; i < s.size(); i++){
            res = res*10 + s[i] - '0';
        }
        if( res > 255)                    return out;  // more than 255
        if( s.size() > 1 && s[0] == '0') return out;  // Can't have leading zeros
        out.push_back(s);
        return out;
    }
    // No we need to find more.
    int res = 0;
    for(int i = 0; i < s.size(); i++) {
        if((res*10 + s[i] -'0') > 255){
            break;
        }
        if(s[0] == '0' && i > 0 ) { // if something something start with 0 we donthave anthing
            break;
        } else {
            res = res*10 + s[i] - '0';
            string right = s.substr(i + 1,  s.size() - (i + 1));
            vector < string > fout = FindAllUtils(right,  k - 1);
            for(string fs : fout) {
                string left = s.substr(0,  i + 1);
                left.push_back('.');
                out.push_back(left.append(fs));
            }
        }
    }
    return out;
}
